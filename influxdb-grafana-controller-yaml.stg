/*
 * Mandatory:
 * 
 * vars.influxGrafana.image.version
 * vars.influxGrafana.limits.cpu
 * vars.influxGrafana.limits.memory
 * vars.influxGrafana.requests.cpu
 * vars.influxGrafana.requests.memory
 * vars.influxdb.image.name
 * vars.influxdb.image.version
 * vars.grafana.image.name
 * vars.grafana.image.version
 * vars.grafana.limits.cpu
 * vars.grafana.limits.memory
 * vars.grafana.requests.cpu
 * vars.grafana.requests.memory
 * vars.grafana.revision
 * 
 * Optional:
 * 
 * vars.influxGrafana.affinity.key
 * vars.influxGrafana.affinity.name
 * vars.influxGrafana.affinity.required
 * vars.influxGrafana.allowOnMaster
 * vars.influxGrafana.tolerations[].effect
 * vars.influxGrafana.tolerations[].key
 * vars.influxGrafana.tolerations[].value
 * vars.influxdb.persistent.share
 * vars.influxdb.persistent.storage.class
 * vars.influxdb.persistent.storage.size
 * vars.grafana.persistent.storage.class
 * vars.grafana.persistent.storage.size
 * vars.grafana.server.rootUrl
 * vars.grafana.users.allowSignUp
 * vars.grafana.auth.disableLoginForm
 * vars.grafana.auth.anonymous
 * vars.grafana.auth.anonymous.orgName
 * vars.grafana.auth.anonymous.orgRole
 * vars.grafana.auth.keycloakOauth
 * vars.grafana.auth.keycloakOauth.clientId
 * vars.grafana.auth.keycloakOauth.clientSecret
 * vars.grafana.auth.keycloakOauth.host
 * vars.grafana.auth.keycloakOauth.realm
 * vars.grafana.auth.basic
 */

import "robobeerun-templates/_affinities.stg"
import "robobeerun-templates/_resources.stg"
import "robobeerun-templates/_tolerations.stg"

/*
 *
 */
influxdb-grafana-controller-yaml(parent, vars) ::= <<

<if(vars.influxdb.persistent)>
---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: influxdb-persistent-storage
  namespace: kube-system
  annotations:
    volume.beta.kubernetes.io/storage-class: <vars.influxdb.persistent.storage.class>
  labels:
    k8s-app: influxdb
    addonmanager.kubernetes.io/mode: EnsureExists
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: <vars.influxdb.persistent.storage.size>
<endif>

<if(vars.grafana.persistent)>
---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-persistent-storage
  namespace: kube-system
  annotations:
    volume.beta.kubernetes.io/storage-class: <vars.grafana.persistent.storage.class>
  labels:
    k8s-app: grafana
    addonmanager.kubernetes.io/mode: EnsureExists
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: <vars.grafana.persistent.storage.size>
<endif>

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-<vars.grafana.revision>
  namespace: kube-system
  labels:
    k8s-app: influxGrafana
    version: <vars.influxGrafana.image.version>
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
data:
  grafana.ini: |
    <if(vars.grafana.server)>
    [server]
    root_url = <vars.grafana.server.rootUrl>
    <endif>

    <if(vars.grafana.users)>
    [users]
    allow_sign_up = <if(vars.grafana.users.allowSignUp)>true<else>false<endif>
    <endif>

    <if(vars.grafana.auth)>
    [auth]
    disable_login_form = <if(vars.grafana.auth.disableLoginForm)>true<else>false<endif>

    <if(vars.grafana.auth.anonymous)>
    [auth.anonymous]
    enabled = true
    org_name = <vars.grafana.auth.anonymous.orgName>
    org_role = <vars.grafana.auth.anonymous.orgRole>
    <endif>

    <if(vars.grafana.auth.keycloakOauth)>
    [auth.generic_oauth]
    enabled = true
    client_id = <vars.grafana.auth.keycloakOauth.clientId>
    client_secret = <vars.grafana.auth.keycloakOauth.clientSecret>
    scopes = openid email profile
    auth_url = <vars.grafana.auth.keycloakOauth.host>/auth/realms/<vars.grafana.auth.keycloakOauth.realm>/protocol/openid-connect/auth
    token_url = <vars.grafana.auth.keycloakOauth.host>/auth/realms/<vars.grafana.auth.keycloakOauth.realm>/protocol/openid-connect/token
    api_url = <vars.grafana.auth.keycloakOauth.host>/auth/realms/<vars.grafana.auth.keycloakOauth.realm>/protocol/openid-connect/userinfo
    allowed_domains = 
    allow_sign_up = true
    <endif>

    <if(vars.grafana.auth.basic)>
    [auth.basic]
    enabled = true
    <endif>
    <endif>

---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: monitoring-influxdb-grafana-<vars.influxGrafana.image.version>
  namespace: kube-system
  labels:
    k8s-app: influxGrafana
    version: <vars.influxGrafana.image.version>
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: influxGrafana
      version: <vars.influxGrafana.image.version>
  template:
    metadata:
      labels:
        k8s-app: influxGrafana
        app: grafana
        version: <vars.influxGrafana.image.version>
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      priorityClassName: system-cluster-critical
      containers:
        - name: influxdb
          image: <vars.influxdb.image.name>:<vars.influxdb.image.version>
          resources:
          <resourcesGroup(parent, vars, vars.influxdb)>
          ports:
            - name: http
              containerPort: 8083
            - name: api
              containerPort: 8086
          volumeMounts:
          - name: grafana-config
            mountPath: /etc/grafana/grafana.ini
            subPath: grafana.ini
          - name: influxdb-persistent-storage
            mountPath: /data
<if(vars.influxdb.persistent.share)>
            subPath: influxdb
<endif>
        - image: <vars.grafana.image.name>:<vars.grafana.image.version>
          name: grafana
          resources:
            # keep request = limit to keep this container in guaranteed class
          <resourcesGroup(parent, vars, vars.grafana)>
          env:
            # This variable is required to setup templates in Grafana.
            - name: INFLUXDB_SERVICE_URL
              value: http://monitoring-influxdb:8086
              # The following env variables are required to make Grafana accessible via
              # the kubernetes api-server proxy. On production clusters, we recommend
              # removing these env variables, setup auth for grafana, and expose the grafana
              # service using a LoadBalancer or a public IP.
          ports:
          - name: ui
            containerPort: 3000
          volumeMounts:
<if(vars.influxdb.persistent.share)>
          - name: influxdb-persistent-storage
<else>
          - name: grafana-persistent-storage
<endif>
            mountPath: /var
<if(vars.influxdb.persistent.share)>
            subPath: grafana
<endif>
      volumes:
      - name: grafana-config
        configMap:
          name: grafana-<vars.grafana.revision>
      - name: influxdb-persistent-storage
<if(vars.influxdb.persistent)>
        persistentVolumeClaim:
          claimName: influxdb-persistent-storage
<else>
        emptyDir: {}
<endif>
      - name: grafana-persistent-storage
<if(vars.grafana.persistent)>
        persistentVolumeClaim:
          claimName: grafana-persistent-storage
<else>
        emptyDir: {}
<endif>
      tolerations:
        - key: "CriticalAddonsOnly"
          operator: "Exists"
        <tolerationMasterEntry(parent, vars, vars.heapster.allowOnMaster)>
        <tolerationEntries(parent, vars, vars.heapster.tolerations)>
      <affinitiesGroup(parent, vars, vars.heapster.affinity)>

>>
