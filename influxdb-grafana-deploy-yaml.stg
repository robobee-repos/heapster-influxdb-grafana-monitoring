/*
 * Mandatory:
 * 
 * vars.influxGrafana.image.version
 * vars.heapsterInfluxdb.image.name
 * vars.heapsterInfluxdb.image.version
 * vars.heapsterGrafana.image.name
 * vars.heapsterGrafana.image.version
 * 
 * Optional:
 * 
 * vars.influxGrafana.affinityRequired
 * vars.influxGrafana.tolerations[].effect
 * vars.influxGrafana.tolerations[].key
 * vars.influxGrafana.tolerations[].value
 * vars.heapsterInfluxdb.persistent.storage.class
 * vars.heapsterInfluxdb.persistent.storage.size
 * vars.heapsterGrafana.persistent.storage.class
 * vars.heapsterGrafana.persistent.storage.size
 */

import "tolerations.stg"

influxdb-grafana-deploy-yaml(parent, vars) ::= <<

<if(vars.heapsterInfluxdb.persistent)>
---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: influxdb-persistent-storage
  namespace: kube-system
  annotations:
    volume.beta.kubernetes.io/storage-class: <vars.heapsterInfluxdb.persistent.storage.class>
  labels:
    k8s-app: influxGrafana
    robobeerun.com/group: cluster-monitoring
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: <vars.heapsterInfluxdb.persistent.storage.size>
<endif>

<if(vars.heapsterGrafana.persistent)>
---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-persistent-storage
  namespace: kube-system
  annotations:
    volume.beta.kubernetes.io/storage-class: <vars.heapsterGrafana.persistent.storage.class>
  labels:
    k8s-app: influxGrafana
    robobeerun.com/group: cluster-monitoring
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: <vars.heapsterGrafana.persistent.storage.size>
<endif>

---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: monitoring-influxdb-grafana-<vars.influxGrafana.image.version>
  namespace: kube-system
  labels:
    k8s-app: influxGrafana
    version: <vars.influxGrafana.image.version>
    robobeerun.com/group: cluster-monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: influxGrafana
      version: <vars.influxGrafana.image.version>
  template:
    metadata:
      labels:
        k8s-app: influxGrafana
        version: <vars.influxGrafana.image.version>
        robobeerun.com/group: cluster-monitoring
    spec:
      containers:
        - image: <vars.heapsterInfluxdb.image.name>:<vars.heapsterInfluxdb.image.version>
          name: influxdb
          resources:
            # keep request = limit to keep this container in guaranteed class
            limits:
              cpu: <vars.heapsterInfluxdb.limits.cpu>
              memory: <vars.heapsterInfluxdb.limits.memory>
            requests:
              cpu: <vars.heapsterInfluxdb.requests.cpu>
              memory: <vars.heapsterInfluxdb.requests.memory>
          ports:
            - containerPort: 8083
            - containerPort: 8086
          volumeMounts:
          - name: influxdb-persistent-storage
            mountPath: /data
        - image: <vars.heapsterGrafana.image.name>:<vars.heapsterGrafana.image.version>
          name: grafana
          env:
          resources:
            # keep request = limit to keep this container in guaranteed class
            limits:
              cpu: <vars.heapsterGrafana.limits.cpu>
              memory: <vars.heapsterGrafana.limits.memory>
            requests:
              cpu: <vars.heapsterGrafana.requests.cpu>
              memory: <vars.heapsterGrafana.requests.memory>
          env:
            # This variable is required to setup templates in Grafana.
            - name: INFLUXDB_SERVICE_URL
              value: http://monitoring-influxdb:8086
              # The following env variables are required to make Grafana accessible via
              # the kubernetes api-server proxy. On production clusters, we recommend
              # removing these env variables, setup auth for grafana, and expose the grafana
              # service using a LoadBalancer or a public IP.
            - name: GF_AUTH_BASIC_ENABLED
              value: "false"
            - name: GF_AUTH_ANONYMOUS_ENABLED
              value: "true"
            - name: GF_AUTH_ANONYMOUS_ORG_ROLE
              value: Admin
            - name: GF_SERVER_ROOT_URL
              value: /api/v1/proxy/namespaces/kube-system/services/monitoring-grafana/
          volumeMounts:
          - name: grafana-persistent-storage
            mountPath: /var
      volumes:
      - name: influxdb-persistent-storage
<if(vars.heapsterInfluxdb.persistent)>
        persistentVolumeClaim:
          claimName: influxdb-persistent-storage
<else>
        emptyDir: {}
<endif>
      - name: grafana-persistent-storage
<if(vars.heapsterGrafana.persistent)>
        persistentVolumeClaim:
          claimName: grafana-persistent-storage
<else>
        emptyDir: {}
<endif>
<if(vars.heapster.affinityRequired)>
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: robobeerun.com/cluster-monitoring-influxdb-grafana
                operator: In
                values:
                - required
<else>
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
              - key: robobeerun.com/cluster-monitoring-influxdb-grafana
                operator: In
                values:
                - preferred
<endif>
<tolerations(parent, vars, vars.influxGrafana.tolerations)>

>>
